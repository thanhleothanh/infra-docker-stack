- name: Initialize Swarm for the main manager
  community.docker.docker_swarm:
    state: present
    advertise_addr: '{{ advertise_host }}:2377'
    listen_addr: '{{ advertise_host }}:2377'
  when: inventory_hostname == groups['managers'][0]

- name: Wait for swarm manager to be ready
  ansible.builtin.shell:
    cmd: docker info --format json | jq -r '.Swarm.LocalNodeState'
  register: swarm_status
  until:
    - "'active' in swarm_status.stdout"
  retries: 30
  delay: 5
  changed_when: true
  when: inventory_hostname == groups['managers'][0]

- name: Get Swarm join token for workers
  ansible.builtin.shell:
    cmd: docker swarm join-token -q worker
  register: worker_token
  when: inventory_hostname == groups['managers'][0]

- name: Get Swarm join token for managers
  ansible.builtin.shell:
    cmd: docker swarm join-token -q manager
  register: manager_token
  when: inventory_hostname == groups['managers'][0]

- name: Join Swarm as an additional manager
  community.docker.docker_swarm:
    state: join
    join_token: "{{ hostvars[groups['managers'][0]]['manager_token']['stdout'] }}"
    remote_addrs:
      ["{{ hostvars[groups['managers'][0]]['advertise_host'] }}:2377"]
    advertise_addr: '{{ advertise_host }}:2377'
    listen_addr: '{{ advertise_host }}:2377'
  when: inventory_hostname in groups['managers'] and inventory_hostname != groups['managers'][0]

- name: Join Swarm as a worker
  community.docker.docker_swarm:
    state: join
    join_token: "{{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }}"
    remote_addrs:
      ["{{ hostvars[groups['managers'][0]]['advertise_host'] }}:2377"]
    advertise_addr: '{{ advertise_host }}:2377'
    listen_addr: '{{ advertise_host }}:2377'
  when: inventory_hostname in groups['workers']
